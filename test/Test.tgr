/* Test.tgr: XXX
 *
 * Copyright: (c) 2022-2023 Jacco van Schaik (jacco@jaccovanschaik.net)
 * Created:   2022-08-01
 *
 * This software is distributed under the terms of the MIT license. See
 * http://www.opensource.org/licenses/mit-license.php for details.
 *
 * vim: softtabstop=4 shiftwidth=4 expandtab textwidth=80
 */

// Constants for every builtin type.
i8c  = const int8   1
u8c  = const uint8  2
i16c = const int16  3
u16c = const uint16 4
i32c = const int32  5
u32c = const uint32 6
i64c = const int64  7
u64c = const uint64 8
f32c = const float32 9
f64c = const float64 10.0
ustc = const ustring "Häłłø"
astc = const astring "Hallo"

// Aliases for every builtin type.
i8a = int8
u8a = uint8
i16a = int16
u16a = uint16
i32a = int32
u32a = uint32
i64a = int64
u64a = uint64
f32a = float32
f64a = float64
asta = astring
usta = ustring

Substruct = struct {
    int8    i8
    uint8   u8
    int16   i16
    uint16  u16
    int32   i32
    uint32  u32
    int64   i64
    uint64  u64
    float32 f32
    float64 f64
    ustring ustr
    astring astr
}

// A struct containing every builtin type.
Struct = struct {
    Substruct sub
    opt Substruct subo
    opt int8    i8o
    opt uint8   u8o
    opt int16   i16o
    opt uint16  u16o
    opt int32   i32o
    opt uint32  u32o
    opt int64   i64o
    opt uint64  u64o
    opt float32 f32o
    opt float64 f64o
    opt ustring ustro
    opt astring astro
}

// An enum.
UnionType = enum {
    INT8_T
    UINT8_T
    INT16_T
    UINT16_T
    INT32_T
    UINT32_T
    INT64_T
    UINT64_T
    FLOAT32_T
    FLOAT64_T
    USTRING_T
    ASTRING_T
    STRUCT_T
    VOID
}

// A union containing every builtin type and a struct.
Union = union(UnionType union_type) {
    INT8_T:     int8    i8
    UINT8_T:    uint8   u8
    INT16_T:    int16   i16
    UINT16_T:   uint16  u16
    INT32_T:    int32   i32
    UINT32_T:   uint32  u32
    INT64_T:    int64   i64
    UINT64_T:   uint64  u64
    FLOAT32_T:  float32 f32
    FLOAT64_T:  float64 f64
    USTRING_T:  ustring ustr
    ASTRING_T:  astring astr
    STRUCT_T:   Struct  s
    VOID:       void
}

// Arrays of every type (including a struct and a union)
I8Array     = array(int8    i8)
U8Array     = array(uint8   u8)
I16Array    = array(int16   i16)
U16Array    = array(uint16  u16)
I32Array    = array(int32   i32)
U32Array    = array(uint32  u32)
I64Array    = array(int64   i64)
U64Array    = array(uint64  u64)
F32Array    = array(float32 f32)
F64Array    = array(float64 f64)
UStrArray   = array(ustring ustr)
AStrArray   = array(astring astr)
StructArray = array(Struct  s)
UnionArray  = array(Union   u)
