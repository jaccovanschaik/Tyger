/* Test.tgr: XXX
 *
 * Copyright: (c) 2022 Jacco van Schaik (jacco@jaccovanschaik.net)
 * Created:   2022-08-01
 *
 * This software is distributed under the terms of the MIT license. See
 * http://www.opensource.org/licenses/mit-license.php for details.
 *
 * vim: softtabstop=4 shiftwidth=4 expandtab textwidth=80
 */

// Constants for every builtin type.
i8c  = const int8   1
u8c  = const uint8  2
i16c = const int16  3
u16c = const uint16 4
i32c = const int32  5
u32c = const uint32 6
i64c = const int64  7
u64c = const uint64 8
f32c = const float32 9
f64c = const float64 10.0
ustc = const ustring "Hoi"
astc = const astring "Hallo"

// Aliases for every builtin type.
i8t = int8
u8t = uint8
i16t = int16
u16t = uint16
i32t = int32
u32t = uint32
i64t = int64
u64t = uint64
f32t = float32
f64t = float64
ast  = astring
ust  = ustring

// A struct containing every builtin type.
Struct = struct {
    int8    i8
    uint8   u8
    int16   i16
    uint16  u16
    int32   i32
    uint32  u32
    int64   i64
    uint64  u64
    float32 f32
    float64 f64
    ustring ustr
    astring astr
}

// An enum.
UnionType = enum {
    INT8_T
    UINT8_T
    INT16_T
    UINT16_T
    INT32_T
    UINT32_T
    INT64_T
    UINT64_T
    FLOAT32_T
    FLOAT64_T
    USTRING_T
    ASTRING_T
    STRUCT_T
}

// A union containing every builtin type and a struct.
Union = union(UnionType union_type) {
    INT8_T:     int8    i8
    UINT8_T:    uint8   u8
    INT16_T:    int16   i16
    UINT16_T:   uint16  u16
    INT32_T:    int32   i32
    UINT32_T:   uint32  u32
    INT64_T:    int64   i64
    UINT64_T:   uint64  u64
    FLOAT32_T:  float32 f32
    FLOAT64_T:  float64 f64
    USTRING_T:  ustring ustr
    ASTRING_T:  astring astr
    STRUCT_T:   Struct  s
}

// Arrays of every type (including a struct and a union)
I8Array     = array(int8    i8)
U8Array     = array(uint8   u8)
I16Array    = array(int16   i16)
U16Array    = array(uint16  u16)
I32Array    = array(int32   i32)
U32Array    = array(uint32  u32)
I64Array    = array(int64   i64)
U64Array    = array(uint64  u64)
F32Array    = array(float32 f32)
F64Array    = array(float64 f64)
UStrArray   = array(ustring ustr)
AStrArray   = array(astring astr)
StructArray = array(Struct  s)
UnionArray  = array(Union   u)
